using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Globalization;

namespace RBDL
{
    public class CommonDL
    {

        #region utility methods & constructors

        /// <summary>
        /// is used to create connection string
        /// </summary>
        /// <param></param>
        /// <returns>Connection String</returns>
        public string GetConnectionString()
        {
            string ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["EINS_RBMSEntitiesCommon"].ToString();
            return ConnectionString;

        }

        public SqlDataReader executeDataReader(String _selectQuery)
        {
            SqlDataReader dr = null;

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();

                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _selectQuery;
                    myCommand.CommandType = CommandType.Text;
                    dr = myCommand.ExecuteReader();
                }
                catch
                {
                    con.Close();
                }
            }

            return dr;
        }

        /// <summary>
        /// execute select query and returns datatable
        /// </summary>
        /// <param name="_selectQuery">The T-SQL command</param>
        /// <returns>A Datatable containing the resultset generated by the command</returns>
        public DataTable executeSelectQuery(String _selectQuery)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();

                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandTimeout = 0;
                    myCommand.CommandText = _selectQuery;
                    myCommand.CommandType = CommandType.Text;
                    myCommand.ExecuteNonQuery();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds.Tables[0];
                    con.Close();
                }
                catch
                {
                    con.Close();
                }

            }

            return dataTable;
        }

        public DataTable executeSelectQuery_note(String _selectQuery)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _selectQuery;
                    myCommand.CommandType = CommandType.Text;
                    myCommand.ExecuteReader();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds.Tables[0];
                    con.Close();
                }
                catch
                {
                    con.Close();
                }
            }

            return dataTable;
        }

        /// <summary>
        /// execute select query using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <returns>A Datatable containing the resultset generated by the command</returns>
        public DataTable executeSelectQuerySP(String _procedureName)
        {
            DataTable dataTable = new DataTable();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;

                    myCommand.ExecuteNonQuery();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds.Tables[0];
                    con.Close();
                }
                catch
                {
                    con.Close();
                }
            }

            return dataTable;
        }

        /// <summary>
        /// execute select query using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <returns>A Datatable containing the resultset generated by the command</returns>
        public DataSet executeDataSetQuerySP(String _procedureName)
        {
            DataSet dataTable = new DataSet();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;

                    myCommand.ExecuteNonQuery();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds;
                    con.Close();
                }
                catch
                {
                    con.Close();
                }
            }

            return dataTable;
        }

        /// <summary>
        /// execute select query using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <returns>A Datatable containing the resultset generated by the command</returns>
        public DataSet executeDataSetQuerySP(String _procedureName, SqlParameter[] sqlParameter)
        {
            DataSet dataTable = new DataSet();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    if (object.ReferenceEquals(sqlParameter, null) == false)
                    {
                        myCommand.Parameters.AddRange(sqlParameter);
                    }
                    myCommand.ExecuteNonQuery();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds;
                    con.Close();
                }
                catch
                {
                    con.Close();

                }
            }

            return dataTable;
        }


        /// <summary>
        /// execute select query with where condition using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <param name="sqlParameter">An array of SqlParamters used to execute the command</param>
        /// <returns>A Datatable containing the resultset generated by the command</returns>
        public DataTable executeSelectQuerySP(String _procedureName, SqlParameter[] sqlParameter)
        {
            DataTable dataTable = new DataTable();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();

                SqlDataAdapter myAdapter = new SqlDataAdapter();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    if (object.ReferenceEquals(sqlParameter, null) == false)
                    {
                        myCommand.Parameters.AddRange(sqlParameter);
                    }
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.ExecuteNonQuery();
                    myAdapter.SelectCommand = myCommand;
                    myAdapter.Fill(ds);
                    dataTable = ds.Tables[0];
                    con.Close();
                }
                catch
                {
                    con.Close();

                }
            }

            return dataTable;
        }

        /// <summary>
        /// execute non select query using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <param name="sqlParameter">An array of SqlParamters used to execute the command</param>
        /// <returns>boolean</returns>
        public bool executeNonSelectQuery(String _procedureName, SqlParameter[] sqlParameter)
        {
            DataTable dataTable = new DataTable();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.Parameters.AddRange(sqlParameter);
                    myCommand.ExecuteNonQuery();
                    con.Close();
                }
                catch
                {
                    con.Close();

                    return false;
                }
            }

            return true;
        }


        public string executeNonReturnStringSelectQuery(String _procedureName, SqlParameter[] sqlParameter)
        {
            string Output;
            SqlCommand myCommand = new SqlCommand();
            DataTable dataTable = new DataTable();
            dataTable = null;
            DataSet ds = new DataSet();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {

                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.Parameters.AddRange(sqlParameter);
                    myCommand.ExecuteNonQuery();
                    Output = (string)myCommand.Parameters["@Success"].Value;
                    con.Close();
                }
                catch
                {
                    //    Console.Write("Error - Connection.executeSelectQuery - Query: 
                    //" + _query + " \nException: " + e.StackTrace.ToString());
                    //    return null;
                    return Output = null;
                }
            }
            return Output;
        }


        /// <summary>
        /// execute scalar query using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <returns>An integer containing the value generated by the command</returns>
        public int executeScalarQuerySP(String _procedureName)
        {
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    int intCount = Convert.ToInt32(myCommand.ExecuteScalar());
                    con.Close();
                    return intCount;
                }
                catch
                {
                    con.Close();
                    return 0;
                }
            }
        }

        public string executeScalarQuerystr(String Query)
        {
            string result = "";
            SqlCommand myCommand = new SqlCommand();

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = Query;
                    myCommand.CommandType = CommandType.Text;
                    if (myCommand.ExecuteScalar() == null)
                    {
                        result = null;
                    }
                    else
                    {
                        result = myCommand.ExecuteScalar().ToString();

                    }
                    con.Close();
                    return result;
                }
                catch
                {
                    con.Close();
                    return null;
                }
            }
        }

        /// <summary>
        /// execute scalar query with where condition using procedure name and returns datatable
        /// </summary>
        /// <param name="_procedureName">The stored procedure name</param>
        /// <param name="sqlParameter">An array of SqlParamters used to execute the command</param>
        /// <returns>integer</returns>
        public int executeScalarQuerySP(String _procedureName, SqlParameter[] sqlParameter)
        {
            SqlCommand myCommand = new SqlCommand();
            CommonFunction _objCommFunction = new CommonFunction();
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    if (object.ReferenceEquals(sqlParameter, null) == false)
                    {
                        myCommand.Parameters.AddRange(sqlParameter);
                    }
                    int intCount = Convert.ToInt32(myCommand.ExecuteScalar());
                    con.Close();
                    return intCount;

                }
                catch (Exception ex)
                {
                    _objCommFunction.Eventlog("Present Report Genrate:", ex.ToString(), "");
                    con.Close();
                    return 0;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_procedureName"></param>
        /// <returns></returns>
        public int executeScalarQuery(String Query)
        {
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();

                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = Query;
                    myCommand.CommandType = CommandType.Text;
                    int intCount = Convert.ToInt32(myCommand.ExecuteScalar());
                    con.Close();
                    return intCount;
                }
                catch
                {
                    con.Close();
                    return 0;
                }
            }
        }


        public bool executeReturnNonSelectQuery(String _procedureName, SqlParameter[] sqlParameter)
        {
            bool Output;

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                DataTable dataTable = new DataTable();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.Parameters.AddRange(sqlParameter);
                    myCommand.ExecuteNonQuery();
                    Output = Convert.ToBoolean(myCommand.Parameters["@Success"].Value);
                    con.Close();
                }
                catch
                {
                    //    Console.Write("Error - Connection.executeSelectQuery - Query: 
                    //" + _query + " \nException: " + e.StackTrace.ToString());
                    //    return null;
                    con.Close();
                    Output = false;
                }
            }

            return Output;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Table_Name"></param>
        /// <returns></returns>
        public bool delete_data(String Table_Name)
        {
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                try
                {
                    con.Open();
                    String Query = "delete from " + Table_Name;
                    SqlCommand cmd = new SqlCommand(Query, con);
                    cmd.ExecuteNonQuery();
                    con.Close();
                    return true;
                }
                catch
                {
                    con.Close();
                    return false;
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Table_Name"></param>
        /// <param name="Conditions"></param>
        /// <returns></returns>
        public bool delete_data(String Table_Name, String Conditions)
        {
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                try
                {
                    con.Open();
                    String Query = "delete from " + Table_Name + " where " + Conditions;
                    SqlCommand cmd = new SqlCommand(Query, con);
                    cmd.ExecuteNonQuery();
                    con.Close();
                    return true;
                }
                catch
                {
                    con.Close();
                    return false;
                }
            }

        }


        public bool update_data(String Query)
        {
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                try
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand(Query, con);
                    cmd.ExecuteNonQuery();
                    con.Close();
                    return true;
                }
                catch
                {
                    return false;
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_procedureName"></param>
        /// <param name="sqlParameter"></param>
        /// <returns></returns>
        public long executeReturnLongNonSelectQuery(String _procedureName, SqlParameter[] sqlParameter)
        {
            long Output;
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                DataTable dataTable = new DataTable();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.Parameters.AddRange(sqlParameter);
                    myCommand.ExecuteNonQuery();
                    Output = Convert.ToInt64(myCommand.Parameters["@Success"].Value);
                    con.Close();
                }
                catch (SqlException e)
                {
                    //clsAccessGroupBE._strError = e.Message.ToString();               
                    Output = 0;
                }
            }
            return Output;
        }

        public int ExecuteInsertUpdateQuery(string query)
        {
            int i = 0;
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = query;
                    myCommand.CommandType = CommandType.Text;
                    i = myCommand.ExecuteNonQuery();
                    con.Close();
                }
                catch (Exception ex)
                {
                    con.Close();
                }

                return i;
            }
        }

        public void executeReturnLongNonSelectQuery_ForTransaction(String _procedureName, SqlParameter[] sqlParameter, out int Output1, out long Output2)
        {

            Output1 = 0;
            Output2 = 0;
            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                SqlCommand myCommand = new SqlCommand();
                DataTable dataTable = new DataTable();
                dataTable = null;
                DataSet ds = new DataSet();
                try
                {
                    con.Open();
                    myCommand.Connection = con;
                    myCommand.CommandText = _procedureName;
                    myCommand.CommandType = CommandType.StoredProcedure;
                    myCommand.Parameters.AddRange(sqlParameter);
                    myCommand.ExecuteNonQuery();
                    Output1 = Convert.ToInt32(myCommand.Parameters["@NCount"].Value);
                    Output2 = Convert.ToInt64(myCommand.Parameters["@NEvent_Id"].Value);
                    con.Close();
                }
                catch (SqlException e)
                {
                    //clsAccessGroupBE._strError = e.Message.ToString();               
                    Output1 = 0;
                    Output2 = 0;
                    con.Close();
                }
            }

        }


        public DataTable fetch_data(String select_option, String Table_Name, String Conditions)
        {
            DataTable Data = new DataTable();
            try
            {
                using (SqlConnection con = new SqlConnection(GetConnectionString()))
                {
                    con.Open();
                    String Query = "Select " + select_option + " from " + Table_Name + " where " + Conditions;
                    SqlDataAdapter Adapter = new SqlDataAdapter(Query, con);
                    Adapter.Fill(Data);
                    con.Close();
                }
            }
            catch (Exception)
            {


            }

            return Data;

        }


        public DataTable fetch_data(String select_option, String Table_Name)
        {
            DataTable Data = new DataTable();

            using (SqlConnection con = new SqlConnection(GetConnectionString()))
            {
                String Query = "Select " + select_option + " from " + Table_Name;
                SqlDataAdapter Adapter = new SqlDataAdapter(Query, con);
                Adapter.Fill(Data);
            }

            return Data;
        }


        #endregion


        public DateTime DateTimeParseWithTime(string Date)
        {
            string strDate = Date;
            DateTime currentTime = DateTime.Now;
            if (strDate.Contains("-"))
            {
                strDate = strDate.Replace("-", "/");
            }
            string[] str = strDate.Split('/');
            try
            {
                str[2] = str[2].Substring(0, 4);
            }
            catch { }
            try
            {
                DateTime dt = new DateTime(Convert.ToInt32(str[2].ToString()), Convert.ToInt32(str[0].ToString()), Convert.ToInt32(str[1].ToString()), currentTime.Hour, currentTime.Minute, currentTime.Second);
                return dt;
            }
            catch
            {
                try
                {
                    DateTime dt = new DateTime(Convert.ToInt32(str[2].ToString()), Convert.ToInt32(str[1].ToString()), Convert.ToInt32(str[0].ToString()), currentTime.Hour, currentTime.Minute, currentTime.Second);
                    return dt;
                }
                catch
                {
                    try
                    {
                        DateTime dt = new DateTime(Convert.ToInt32(str[0].ToString()), Convert.ToInt32(str[1].ToString()), Convert.ToInt32(str[2].ToString()), currentTime.Hour, currentTime.Minute, currentTime.Second);
                        return dt;
                    }
                    catch (Exception ex)
                    {
                        int i;
                        try { i = Convert.ToInt32(System.Web.HttpContext.Current.Session["EmployeeId"].ToString()); }
                        catch { i = 0; }
                        return new DateTime();
                    }
                }
            }
        }

        //For Date(dd/MM/yyyy)  Independent of PC Date format 
        public DateTime Datetimeparse(string Date)
        {
            string strDate = Date;

            if (strDate.Contains("-"))
            {
                strDate = strDate.Replace("-", "/");
            }

            string[] str = strDate.Split('/');
            try
            {
                str[2] = str[2].Substring(0, 4);
            }
            catch { }
            try
            {
                DateTime dt = new DateTime(Convert.ToInt32(str[2].ToString()), Convert.ToInt32(str[1].ToString()), Convert.ToInt32(str[0].ToString()));
                return dt;
            }
            catch
            {
                try
                {
                    DateTime dt = new DateTime(Convert.ToInt32(str[2].ToString()), Convert.ToInt32(str[0].ToString()), Convert.ToInt32(str[1].ToString()));
                    return dt;
                }
                catch
                {
                    try
                    {
                        DateTime dt = new DateTime(Convert.ToInt32(str[0].ToString()), Convert.ToInt32(str[1].ToString()), Convert.ToInt32(str[2].ToString()));
                        return dt;
                    }
                    catch (Exception ex)
                    {
                        return new DateTime();
                    }
                }
            }
        }
        public int HourIn24Format(string hour, string meridian)
        {
            int h = Convert.ToInt32(hour);
            if (meridian == "AM" || meridian == "am")
            {
                if (h == 12)
                    return 0;
                else
                    return h;
            }
            else
            {
                if (h == 12)
                    return 12;
                else
                    return h + 12;
            }
        }

   
    }
}
